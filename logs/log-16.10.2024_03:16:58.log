[16.10.2024 03:16:58] [SYSTEM] Error handler deployed.
[16.10.2024 03:16:58] [FILESYSTEM] Loading filesystem...
[16.10.2024 03:16:58] ┐
┤
┘
[16.10.2024 03:16:58] [FILESYSTEM] Filesystem has been loaded.
[16.10.2024 03:16:59] [MONGO] Connected to MongoDB
[16.10.2024 03:17:00] [SCHEDULER] Sanction removal schedules have been set.
[16.10.2024 03:17:01] [DISCORD API] Connected to Discord API.
[16.10.2024 03:17:01] [DISCORD API] Started refreshing application (/) commands.
[16.10.2024 03:17:01] [SCHEDULER] Activity update schedules have been deployed.
[16.10.2024 03:17:01] [DISCORD API] Successfully reloaded application (/) commands.
[16.10.2024 03:17:03] {
  timeConversion: {
    timeConversion: [Module: null prototype] {
      calculateMinutes: [AsyncFunction: calculateMinutes],
      createTimes: [AsyncFunction: createTimes],
      getCurrentHour: [AsyncFunction: getCurrentHour],
      getCurrentTime: [AsyncFunction: getCurrentTime],
      validateTimeFormat: [AsyncFunction: validateTimeFormat]
    }
  },
  dayConversion: {
    dayConversion: [Module: null prototype] {
      getCurrentDate: [AsyncFunction: getCurrentDate],
      getCurrentMonthAsString: [AsyncFunction: getCurrentMonthAsString],
      getCurrentWeek: [AsyncFunction: getCurrentWeek],
      getDayAsString: [AsyncFunction: getDayAsString],
      getDifferenceInDays: [AsyncFunction: getDifferenceInDays],
      isDateInWeek: [AsyncFunction: isDateInWeek]
    }
  },
  math: {
    math: [Module: null prototype] {
      calculateAverageMin: [AsyncFunction: calculateAverageMin],
      percentage: [AsyncFunction: percentage]
    }
  },
  checks: {
    checks: [Module: null prototype] {
      validateTwoArguments: [AsyncFunction: validateTwoArguments]
    }
  },
  discord: {
    buttonMenus: {
      sendListTypeSelectMenu: [AsyncFunction: sendListTypeSelectMenu],
      sendMenuDemitere: [AsyncFunction: sendMenuDemitere],
      sendMenuChestor: [AsyncFunction: sendMenuChestor],
      sendMenuConcediu: [AsyncFunction: sendMenuConcediu],
      sendMenuConducere: [AsyncFunction: sendMenuConducere],
      sendMenuInstructor: [AsyncFunction: sendMenuInstructor],
      mphClockInSelect: [AsyncFunction: mphClockInSelect],
      sendSanctionMenu: [AsyncFunction: sendSanctionMenu],
      sendSubdepMenu: [AsyncFunction: sendSubdepMenu],
      sendSubdepSubMenu: [AsyncFunction: sendSubdepSubMenu],
      sendMenuDeleteUser: [AsyncFunction: sendMenuDeleteUser],
      sendUserEditMenu: [AsyncFunction: sendUserEditMenu],
      sendSnapshotOverview: [AsyncFunction: sendSnapshotOverview]
    },
    embeds: {
      activityListsEmbeds: [Object: null prototype] [Module],
      activityManagementEmbeds: [Object: null prototype] [Module],
      baseEmbeds: [Object: null prototype] [Module],
      meniuInstructorEmbeds: [Object: null prototype] [Module],
      subdepManagementEmbeds: [Object: null prototype] [Module],
      userActivityEmbeds: [Object: null prototype] [Module],
      userInfoEmbeds: [Object: null prototype] [Module]
    },
    errors: {},
    validate: {
      baseInputValidation: [Object: null prototype] [Module],
      formValidation: [Object: null prototype] [Module],
      meniuConcediuValidation: [Object: null prototype] [Module],
      subdepManagementValidation: [Object: null prototype] [Module]
    },
    logging: { base: [Object: null prototype] [Module] },
    modals: {
      formModals: [Object: null prototype] [Module],
      meniuConcediuModals: [Object: null prototype] [Module],
      sanctionThreadsModals: [Object: null prototype] [Module],
      subdepManagementModals: [Object: null prototype] [Module],
      userEditMenuModals: [Object: null prototype] [Module]
    },
    quickFunctions: {
      chestorListsQFuncs: [Object: null prototype] [Module],
      meniuInstructorQFuncs: [Object: null prototype] [Module],
      sanctionThreadsQFuncs: [Object: null prototype] [Module],
      simpleTranscriptGeneratorQFuncs: [Object: null prototype] [Module],
      subdepManagementQFuncs: [Object: null prototype] [Module],
      userAddQFuncs: [Object: null prototype] [Module]
    },
    roles: { rankUpdates: [Object: null prototype] [Module] },
    selectMenus: {
      meniuChestorSelectMenus: [Object: null prototype] [Module],
      meniuConducereSelectMenus: [Object: null prototype] [Module],
      meniuInstructorSelectMenus: [Object: null prototype] [Module],
      sanctionThreadsSelectMenus: [Object: null prototype] [Module],
      userActivitySelectMenus: [Object: null prototype] [Module],
      userSnapshotSelectMenus: [Object: null prototype] [Module]
    }
  },
  algorithms: {
    algos: [Module: null prototype] {
      gradeAlgorithm: [AsyncFunction: gradeAlgorithm]
    },
    algoUtils: [Module: null prototype] {
      calculateActionActivityScore: [AsyncFunction: calculateActionActivityScore],
      calculateActivityScore: [AsyncFunction: calculateActivityScore],
      calculateCallsScore: [AsyncFunction: calculateCallsScore],
      calculateFineScore: [AsyncFunction: calculateFineScore],
      calculateReportScore: [AsyncFunction: calculateReportScore],
      gradeAdjust: [AsyncFunction: gradeAdjust]
    }
  },
  activity: { utils: { utils: [Object: null prototype] [Module] } }
}
