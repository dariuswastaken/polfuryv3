[16.10.2024 03:20:14] [SYSTEM] Error handler deployed.
[16.10.2024 03:20:14] [FILESYSTEM] Loading filesystem...
[16.10.2024 03:20:14] ┐
┤
┘
[16.10.2024 03:20:14] [FILESYSTEM] Filesystem has been loaded.
[16.10.2024 03:20:15] [MONGO] Connected to MongoDB
[16.10.2024 03:20:16] [SCHEDULER] Sanction removal schedules have been set.
[16.10.2024 03:20:16] [DISCORD API] Connected to Discord API.
[16.10.2024 03:20:16] [DISCORD API] Started refreshing application (/) commands.
[16.10.2024 03:20:16] [SCHEDULER] Activity update schedules have been deployed.
[16.10.2024 03:20:17] [DISCORD API] Successfully reloaded application (/) commands.
[16.10.2024 03:20:19] {
  timeConversion: {
    calculateMinutes: [AsyncFunction: calculateMinutes],
    createTimes: [AsyncFunction: createTimes],
    getCurrentHour: [AsyncFunction: getCurrentHour],
    getCurrentTime: [AsyncFunction: getCurrentTime],
    validateTimeFormat: [AsyncFunction: validateTimeFormat]
  },
  dayConversion: {
    getCurrentDate: [AsyncFunction: getCurrentDate],
    getCurrentMonthAsString: [AsyncFunction: getCurrentMonthAsString],
    getCurrentWeek: [AsyncFunction: getCurrentWeek],
    getDayAsString: [AsyncFunction: getDayAsString],
    getDifferenceInDays: [AsyncFunction: getDifferenceInDays],
    isDateInWeek: [AsyncFunction: isDateInWeek]
  },
  math: {
    calculateAverageMin: [AsyncFunction: calculateAverageMin],
    percentage: [AsyncFunction: percentage]
  },
  checks: { validateTwoArguments: [AsyncFunction: validateTwoArguments] },
  discord: {
    buttonMenus: {
      sendListTypeSelectMenu: [AsyncFunction: sendListTypeSelectMenu],
      sendMenuDemitere: [AsyncFunction: sendMenuDemitere],
      sendMenuChestor: [AsyncFunction: sendMenuChestor],
      sendMenuConcediu: [AsyncFunction: sendMenuConcediu],
      sendMenuConducere: [AsyncFunction: sendMenuConducere],
      sendMenuInstructor: [AsyncFunction: sendMenuInstructor],
      mphClockInSelect: [AsyncFunction: mphClockInSelect],
      sendSanctionMenu: [AsyncFunction: sendSanctionMenu],
      sendSubdepMenu: [AsyncFunction: sendSubdepMenu],
      sendSubdepSubMenu: [AsyncFunction: sendSubdepSubMenu],
      sendMenuDeleteUser: [AsyncFunction: sendMenuDeleteUser],
      sendUserEditMenu: [AsyncFunction: sendUserEditMenu],
      sendSnapshotOverview: [AsyncFunction: sendSnapshotOverview]
    },
    embeds: {
      sendOutList: [AsyncFunction: sendOutList],
      sendUpList: [AsyncFunction: sendUpList],
      sendActivityUpdateRetryEmbed: [AsyncFunction: sendActivityUpdateRetryEmbed],
      sendSuccessEmbed: [AsyncFunction: sendSuccessEmbed],
      sendWarningEmbed: [AsyncFunction: sendWarningEmbed],
      sendUserCooldownList: [AsyncFunction: sendUserCooldownList],
      sendInstrActivityEmbed: [AsyncFunction: sendInstrActivityEmbed],
      sendSubdepMemberList: [AsyncFunction: sendSubdepMemberList],
      sendUserActivityEmbed: [AsyncFunction: sendUserActivityEmbed],
      sendUserInfoEmbed: [AsyncFunction: sendUserInfoEmbed]
    },
    errors: {},
    validate: {
      callsignInput: [AsyncFunction: callsignInput],
      reasonInput: [AsyncFunction: reasonInput],
      formIntrare: [AsyncFunction: formIntrare],
      formTrecereTest: [AsyncFunction: formTrecereTest],
      motivConcediu: [AsyncFunction: motivConcediu],
      callsignInputInstrActivity: [AsyncFunction: callsignInputInstrActivity],
      callsignInputSubdep: [AsyncFunction: callsignInputSubdep]
    },
    logging: {
      createLog: [AsyncFunction: createLog],
      createSimpleLog: [AsyncFunction: createSimpleLog]
    },
    modals: {
      displayFormularDemisie: [AsyncFunction: displayFormularDemisie],
      displayFormularIntrare: [AsyncFunction: displayFormularIntrare],
      displayFormularTrecereTest: [AsyncFunction: displayFormularTrecereTest],
      displayMotivConcediuModal: [AsyncFunction: displayMotivConcediuModal],
      displaySanctionCallsignInputModal: [AsyncFunction: displaySanctionCallsignInputModal],
      displaySanctionMotivInputModal: [AsyncFunction: displaySanctionMotivInputModal],
      displayInstrActivityCallsignInputModal: [AsyncFunction: displayInstrActivityCallsignInputModal],
      displayInstrMenuCallsignInputModal: [AsyncFunction: displayInstrMenuCallsignInputModal],
      displayUserEditModal: [AsyncFunction: displayUserEditModal]
    },
    quickFunctions: {
      createOutList: [AsyncFunction: createOutList],
      createUpList: [AsyncFunction: createUpList],
      addCertificat: [AsyncFunction: addCertificat],
      removeCertificat: [AsyncFunction: removeCertificat],
      addSanctionToMember: [AsyncFunction: addSanctionToMember],
      createSanctionPrivateChannel: [AsyncFunction: createSanctionPrivateChannel],
      createSanctionThread: [AsyncFunction: createSanctionThread],
      createChannelTranscript: [AsyncFunction: createChannelTranscript],
      addFunc: [AsyncFunction: addFunc],
      removeFunc: [AsyncFunction: removeFunc],
      addAcademiePD: [AsyncFunction: addAcademiePD],
      addMemberPD: [AsyncFunction: addMemberPD],
      addReintegrarePD: [AsyncFunction: addReintegrarePD]
    },
    roles: {
      updateRankRoles: [AsyncFunction: updateRankRoles],
      updateRankRolesCI: [AsyncFunction: updateRankRolesCI]
    },
    selectMenus: {
      sendChestorRankChoiceMenu: [AsyncFunction: sendChestorRankChoiceMenu],
      sendListDeleteWeekChoiceMenu: [AsyncFunction: sendListDeleteWeekChoiceMenu],
      sendListWeekChoiceMenu: [AsyncFunction: sendListWeekChoiceMenu],
      sendWeekChoiceMenu: [AsyncFunction: sendWeekChoiceMenu],
      sendRankChoiceMenu: [AsyncFunction: sendRankChoiceMenu],
      sendCertificatChoiceMenuCooldown: [AsyncFunction: sendCertificatChoiceMenuCooldown],
      sendCertificateChoiceMenu: [AsyncFunction: sendCertificateChoiceMenu],
      sendCooldownCertificatDurationSelect: [AsyncFunction: sendCooldownCertificatDurationSelect],
      sendSanctionDurationChoiceMenu: [AsyncFunction: sendSanctionDurationChoiceMenu],
      sendActivityWeekChoiceMenu: [AsyncFunction: sendActivityWeekChoiceMenu],
      sendUserSnapshotChoiceMenu: [AsyncFunction: sendUserSnapshotChoiceMenu]
    }
  },
  algorithms: {
    gradeAlgorithm: [AsyncFunction: gradeAlgorithm],
    calculateActionActivityScore: [AsyncFunction: calculateActionActivityScore],
    calculateActivityScore: [AsyncFunction: calculateActivityScore],
    calculateCallsScore: [AsyncFunction: calculateCallsScore],
    calculateFineScore: [AsyncFunction: calculateFineScore],
    calculateReportScore: [AsyncFunction: calculateReportScore],
    gradeAdjust: [AsyncFunction: gradeAdjust]
  },
  activity: {
    utils: {
      createNotices: [AsyncFunction: createNotices],
      getActionActivity: [AsyncFunction: getActionActivity],
      gradeRating: [AsyncFunction: gradeRating]
    }
  }
}
